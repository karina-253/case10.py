import csv
import json
import os.path
import collections
import datetime


def read_csv_file(filename: str) -> list:
    """
    Reads financial data from a CSV file and converts it to a standard format.

    Args:
        filename (str):  The path to the CSV file

    Returns:
        list: A list of dictionaries with transactions in a unified format
    """

    data = []

    try:
        with open(filename, 'r', encoding='utf-8') as file:
            read_csv = csv.DictReader(file)

            for row in read_csv:
                amount = float(row.get('amount', 0))
                transact_type = "–¥–æ—Ö–æ–¥" if amount >= 0 else "—Ä–∞—Å—Ö–æ–¥"

                transaction = {
                    'date': row.get('date', '').strip(),
                    'amount': amount,
                    'description': row.get('description', '').strip(),
                    'type': transact_type
                }
                data.append(transaction)

            return data

    except FileNotFoundError:
        print("Error: The CSV file could not be found.")
        return []


def read_json_file(filename: str) -> list:
    """
    Reads financial data from a JSON file and converts it to a standard format.

    Args:
        filename (str):  The path to the JSON file

    Returns:
        list: A list of dictionaries with transactions in a unified format
    """

    try:
        with open(filename, 'r', encoding='utf-8') as file:
            read_json = json.load(file)

            transactions = read_json.get('transactions', [])
            single_format = []

            for operation in transactions:
                amount = float(operation.get('amount', 0))
                transact_type = "–¥–æ—Ö–æ–¥" if amount >= 0 else "—Ä–∞—Å—Ö–æ–¥"

                transaction = {
                    'date': operation.get('date', '').strip(),
                    'amount': amount,
                    'description': operation.get('description', '').strip(),
                    'type': transact_type
                }
                single_format.append(transaction)

            return single_format

    except FileNotFoundError:
        print("Error: The JSON file could not be found.")
        return []
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON format in file")
        return []



def import_financial_data(filename: str):
    """
    Automatically detects the file format by extension and calls
    the appropriate function.

    Args:
        filename (str):  The path to the file (CSV or JSON)

    Returns:
        list: A list of dictionaries with transactions in a unified format
    """

    if not os.path.exists(filename):
        print(f"Error: File does not exist.")
        return []

    file_type = os.path.splitext(filename)[1].lower()

    if file_type == '.csv':
        result = read_csv_file(filename)
    elif file_type == '.json':
        result = read_json_file(filename)
    else:
        print(f"Error: Unsupported file format")
        return []
    return result


def categorize_transaction_with_multiple(description: str, categories: dict,
                                         categories_priority: list) -> str:

    description_low = description.lower()
    matched_categories = []

    for category in categories_priority:
        keywords = categories.get(category, [])
        if any(keyword in description_low for keyword in keywords):
            matched_categories.append(category)

    if matched_categories:
        return matched_categories[0]
    return "–¥—Ä—É–≥–æ–µ"


def categorize_all_transactions(transactions: list) -> list:

    for transaction in transactions:
        desc = transaction.get("description", "")
        category = categorize_transaction_with_multiple(desc, categories, categories_priority)
        transaction["category"] = category
    return transactions


#—à–∞–≥ 1 : –ü–æ—Å—á–∏—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
def calculate_basic_stats(transactions: list) -> dict:
    total_income = sum(t['amount'] for t in transactions
                       if t['amount'] > 0)
    total_expense = sum(t['amount'] for t in transactions
                        if t['amount'] < 0)
    balance = total_income + total_expense
    count_transactions = len(transactions)#–∏—Å–ø–æ–ª—å—Ö–æ–≤–∞–ª–∞ sum() –∏ len() –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–æ–≤
    return {
        'total_income': total_income,
        'total_expense': total_expense,
        'balance': balance,
        'transaction_count': count_transactions
    }

#–®–∞–≥ 2: –†–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def calculate_by_category(transactions: list) -> dict: # transactions ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    category_totals = {}#—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (—Å–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏)
    total_expenses = sum(t['amount'] for t in transactions
                         if t['amount'] < 0)

    for t in transactions:
        category = t.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') #–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á—É 'category', –∏–Ω–∞—á–µ
        if category not in category_totals:
            category_totals[category] = {'sum': 0, 'count': 0}
        category_totals[category]['sum'] += t['amount']
        category_totals[category]['count'] += 1

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    for cat, data in category_totals.items():
        data['percent'] = (-data['sum'] / -total_expenses * 100) if total_expenses != 0 else 0

    return category_totals


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ –º–µ—Å—è—Ü–∞–º)
def analyze_by_time(transactions: list) -> dict:
    monthly_stats = {}

    for t in transactions:
        date_obj = datetime.datetime.strptime(t['date'], '%Y-%m-%d')
        month_key = date_obj.strftime('%Y-%m')  # –Ω–∞–ø—Ä–∏–º–µ—Ä, '2024-01'
        if month_key not in monthly_stats:
            monthly_stats[month_key] = {
                'income': 0,
                'expenses': 0,
                'categories': []
            }
        if t['amount'] > 0:
            monthly_stats[month_key]['income'] += t['amount']
        elif t['amount'] < 0:
            monthly_stats[month_key]['expenses'] += t['amount']
            monthly_stats[month_key]['categories'].append(t.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))

    # –ê–Ω–∞–ª–∏–∑ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ –º–µ—Å—è—Ü
    for month, data in monthly_stats.items():
        category_counter = collections.Counter(data['categories'])
        most_common = category_counter.most_common(3)
        data['top_categories'] = most_common

    return monthly_stats


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    print("=" * 60)
    print("–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–†")
    print("=" * 60)

    print("–ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ò–ó –§–ê–ô–õ–û–í")
    print("-" * 40)

    data_csv = import_financial_data('money.csv')
    data_json = import_financial_data('transactions.json')

    if not data_csv and not data_json:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤.")
        return

    all_transactions = data_csv + data_json

    transactions = categorize_all_transactions(all_transactions)

    # –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    print("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print("-" * 40)
    basic_stats = calculate_basic_stats(transactions)
    print(f"üí∞ –î–æ—Ö–æ–¥—ã: {basic_stats['total_income']:.2f} —Ä—É–±.")#–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –¥–æ 2 —Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    print(f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {abs(basic_stats['total_expense']):.2f} —Ä—É–±.")
    print(f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {basic_stats['balance']:.2f} —Ä—É–±.")

    # –†–∞—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = calculate_by_category(transactions)
    print("\n–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, data in category_stats.items():
        print(f"{category}: {abs(data['sum']):.2f} —Ä—É–±. ({data['percent']:.1f}%)")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    timeline = analyze_by_time(transactions)
    print("\n–ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º:")
    for month, data in timeline.items():
        print(f"\n–ú–µ—Å—è—Ü: {month}")
        print(f" –î–æ—Ö–æ–¥—ã: {data['income']:.2f} —Ä—É–±.")
        print(f" –†–∞—Å—Ö–æ–¥—ã: {abs(data['expenses']):.2f} —Ä—É–±.")
        print("–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–∞:")
        for cat, count in data['top_categories']:
            print(f"  {cat}: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

categories = {
    "–ø—Ä–æ–¥—É–∫—Ç—ã": ["–ø—Ä–æ–¥—É–∫—Ç—ã", "–º–∞–≥–∞–∑–∏–Ω", "–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π", "–ø—è—Ç—ë—Ä–æ—á–∫–∞", "–Ω–∏–∫–∞", "–∫–∞—Å–∏—Ä–∞"],
    "–æ–±–µ–¥ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–æ–±–µ–¥", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "—É–∂–∏–Ω", "–∑–∞–≤—Ç—Ä–∞–∫"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–±–∏–ª–µ—Ç"],
    "—É—Å–ª—É–≥–∏": ["–º–æ–±–∏–ª—å–Ω—ã–π", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—É—Å–ª—É–≥–∞", "—Å–µ—Ä–≤–∏—Å", "—Ä–µ–º–æ–Ω—Ç"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "—Ç–µ–∞—Ç—Ä", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∏–≥—Ä—ã", "–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä"],
    "–æ–¥–µ–∂–¥–∞": ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã", "–≥–∞—Ä–¥–µ—Ä–æ–±"],
    "–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": ["–∞–ø—Ç–µ–∫–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–æ", "–º–µ–¥–∏—Ü–∏–Ω", "–≤—Ä–∞—á"],
    "—Å–ø–æ—Ä—Ç": ["—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∞–∂—ë—Ä–∫–∞", "—Ñ–∏—Ç–Ω–µ—Å", "—Å–ø–æ—Ä—Ç–∑–∞–ª"],
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–∫—É—Ä—Å", "—É—á–µ–±–∞", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"],
    "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏": ["–ö–æ–º–º—É–Ω–∞–ª–∫–∞", "–≤–æ–¥–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–≥–∞–∑"],
    "–¥–µ–ø–æ–∑–∏—Ç/–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–∫–ª–∏–µ–Ω—Ç–æ–≤", "–¥–µ–ø–æ–∑–∏—Ç", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
    "–∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ –¥–æ—Ö–æ–¥—ã": ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥", "–ø–µ—Ä–µ–≤–æ–¥"],
    "–ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞": ["–∫—Ä–µ–¥–∏—Ç", "–∏–ø–æ—Ç–µ–∫–∞", "–ø–æ–≥–∞—à–µ–Ω–∏–µ"],
    "–ø–æ–¥–∞—Ä–∫–∏": ["–ø–æ–¥–∞—Ä–æ–∫", "–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"],
    "–Ω–∞–ª–æ–≥–∏": ["–Ω–∞–ª–æ–≥", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π"]
    }

categories_priority = [
    "–∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ –¥–æ—Ö–æ–¥—ã",
    "–ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞",
    "–ø—Ä–æ–¥—É–∫—Ç—ã",
    "–æ–±–µ–¥ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "—É—Å–ª—É–≥–∏",
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "–æ–¥–µ–∂–¥–∞",
    "–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
    "—Å–ø–æ—Ä—Ç",
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
    "–¥–µ–ø–æ–∑–∏—Ç/–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–ø–æ–¥–∞—Ä–∫–∏",
    "–Ω–∞–ª–æ–≥–∏"
    ]

if __name__ == "__main__":
    main()
